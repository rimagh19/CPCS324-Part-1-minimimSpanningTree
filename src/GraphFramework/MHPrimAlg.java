package GraphFramework;

import PhoneNetworkApp.BluePrintGraph;
import PhoneNetworkApp.Line;
import PhoneNetworkApp.Office;

public class MHPrimAlg extends MSTAlgorithm {

    public MHPrimAlg(BluePrintGraph graph) throws Exception {
        this.MSTresultList = new Edge[graph.verticesNo - 1];

    }
//===================================================================================================================================
    public void findMST(BluePrintGraph graph) {
        // firs creat min heap 
        minHeap minH = new minHeap(graph.verticesNo);
        
        for (int i = 0; i < graph.verticesNo; i++) {
            //set all the min heap node with infinity for the ker and null for the parent 
            minH.insert(graph.vertices.get(i), Integer.MAX_VALUE, null);
        }
        // to start the algorithm we must set the first vertex(index=0) with key value = 1
        minH.updateKey(0, 1);

        heapNode minNode = minH.extract_min();//save the min heap node withe minmumm key value 
        
        Office minKeyOffice = (Office) minNode.vertex;// then save the vertex withe minmumm key value from heap node
        minKeyOffice.isVisited = true;// Mark the vertex withe minmumm key value as visited

        int resultCunt = 0;// counter for result array
        
       // Loop Through the min heap
        while (!minH.isisEmpty()) {
           
            //loop through the adjList of the vertex withe minmumm key value
            for (int i = 0; i < minKeyOffice.adjList.size(); i++) {
                
                // check if the target is not visired
                if (minKeyOffice.adjList.get(i).target.isVisited == false) {
                    
                    //find the index of the target vertex in the min heap
                    int j = minH.VertexIndex(minKeyOffice.adjList.get(i).target);
                    
                    // save the key of the target vertex
                    int keyValue = minH.Heap[j].key;
                    
                    //check if the weight between the source(vertex withe minmumm key value) and the target
                    //if less than the key value of the target
                    if (keyValue > minKeyOffice.adjList.get(i).weight) {
                        
                    //  updata the key value and parent of the target
                        minH.Heap[j].parent = minKeyOffice;
                       
                        minH.updateKey(minKeyOffice.adjList.get(i).weight, j);
                        
                      
                        
                        
                    }
                }
            }// end for loop 

            minNode = minH.extract_min();// save new min heap node withe minmumm key value 
            
            Office targetVertex = (Office) minNode.vertex; 
            
            //Create the edge with minimum weight
            Line line = new Line(minNode.parent, minNode.vertex, minNode.key);
            
            // save edge in the result array 
            MSTresultList[resultCunt] = line;
            
            resultCunt++;// counter for  result array 
            
            minNode.vertex.isVisited = true;// Mark the vertex withe minmumm key value as visited
            
            minKeyOffice = targetVertex;
        }// end while loop 

    }//end function
    
//====================================================================================================================================
    @Override
    public void displayResultingMST() {
        int cost = 0;
        System.out.println("The phone network (minimum spanning tree) generated by min-heap based Prim algorithm is as follows:");

        for (int i = 0; i < MSTresultList.length; i++) {
            
            System.out.print("Office No. ");
            System.out.print(MSTresultList[i].source.label);
            System.out.print(" - ");
            System.out.print("Office No. ");
            System.out.print(MSTresultList[i].target.label);
            System.out.print(": line length:");
            System.out.println(MSTresultList[i].weight);
            cost += MSTresultList[i].weight;
        }
        System.out.println("...");
        System.out.println("The cost of designed phone network: " + cost);
    }
}
